/**
 * Note: This license has also been called the “Simplified BSD License” and the “FreeBSD License”.
 *
 * Copyright 2024 MESE POC: Volker Voß, Federal Armed Forces of Germany
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other materials provided with
 * the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSEnARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BEn LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */
package de.bundeswehr.mese.sedapexpress.crypto;

import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.KeyGenerator;

import org.bouncycastle.jcajce.SecretKeyWithEncapsulation;
import org.bouncycastle.jcajce.spec.KEMExtractSpec;
import org.bouncycastle.jcajce.spec.KEMGenerateSpec;
import org.bouncycastle.pqc.jcajce.spec.KyberParameterSpec;

public class KyberUtils {

    static {
	Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
	Security.addProvider(new org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider());
    }

    public static KeyPair generateKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {

	KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("Kyber", "BCPQC");
	keyPairGenerator.initialize(KyberParameterSpec.kyber512, new SecureRandom());
	return keyPairGenerator.generateKeyPair();
    }

    public static SecretKeyWithEncapsulation generateSecretKeySender(PublicKey publicKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
	// You will request a key generator
	KeyGenerator keyGenerator = KeyGenerator.getInstance("Kyber", "BCPQC");
	// You will set up a KEM Generate Spec with the public key
	KEMGenerateSpec kemGenerateSpec = new KEMGenerateSpec(publicKey, "Secret");
	// Now you can initialize the key generator with the kem generate spec and
	// generate out share secret
	keyGenerator.init(kemGenerateSpec);
	return (SecretKeyWithEncapsulation) keyGenerator.generateKey();
    }

    public static SecretKeyWithEncapsulation generateSecretKeyReciever(PrivateKey privateKey, byte[] encapsulation) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
	// You will set up a KEM Extract Spec with the receiver private key - in this
	// case you need the encapsulation
	// generated by the receiver as well.
	KEMExtractSpec kemExtractSpec = new KEMExtractSpec(privateKey, encapsulation, "Secret");
	// You will request a key generator
	KeyGenerator keyGenerator = KeyGenerator.getInstance("Kyber", "BCPQC");
	// Now you can initialize the key generator with the kem extract spec and
	// retrieve the KEM secret.
	keyGenerator.init(kemExtractSpec);
	return (SecretKeyWithEncapsulation) keyGenerator.generateKey();
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
	KeyPair pair = KyberUtils.generateKeyPair();

	SecretKeyWithEncapsulation encapsulatedKey = KyberUtils.generateSecretKeySender(pair.getPublic());

	SecretKeyWithEncapsulation key = KyberUtils.generateSecretKeyReciever(pair.getPrivate(), encapsulatedKey.getEncoded());

	System.out.println(encapsulatedKey.equals(key));

    }
}
